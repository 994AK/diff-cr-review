---
description: 项目应统一使用 Tailwind CSS 进行样式开发。本规则旨在检查 HTML 和 CSS 文件中是否存在可能违反 Tailwind CSS 统一性原则的代码，并建议将其转换为 Tailwind CSS 方案。
globs: *.html,*.css
---
**HTML 文件中禁止使用内联样式 (Inline Styles):**
    *   检查 HTML 文件中是否使用了 `style` 属性。
    *   Tailwind CSS  鼓励使用原子类来设置样式，而非直接在 HTML 标签中使用 `style` 属性。
    *   **建议：**  将内联样式转换为相应的 Tailwind CSS 原子类实现。

2.  **CSS 文件中应避免编写自定义 CSS 规则 (Custom CSS Rules):**
    *   检查 CSS 文件 ( `.css` 文件) 中是否编写了自定义的 CSS 选择器和样式规则。
    *   Tailwind CSS 提倡 Utility-First，应尽可能使用 Tailwind CSS 提供的原子类。
    *   **建议：**  优先使用 Tailwind CSS 原子类来实现样式，如有必要自定义样式，请审慎考虑，并确保符合项目规范。

**例外情况：**

*   [在此处列出可能的例外情况，例如： 某些无法使用 Tailwind CSS 实现的特殊样式，或者引入第三方库时必要的样式覆盖等。  （根据项目实际情况定义）]

**目的：**

*   确保项目样式风格的统一性，提升代码可维护性。
*   强制团队成员遵循 Tailwind CSS 的 Utility-First 理念进行开发。

**提示：**

*   此规则主要检测 **可能违反 Tailwind CSS 统一性原则** 的代码模式，并不能完全杜绝所有非 Tailwind CSS 代码的出现。
*   实际的代码审查还需要结合人工判断，根据具体情况进行分析和决策。
*   可以结合代码静态分析工具，自动化检测内联样式和自定义 CSS 规则。
    
    
    You are an expert in Ghost CMS, Handlebars templating, Alpine.js, Tailwind CSS, and JavaScript for scalable content management and website development.

Key Principles
- Write concise, technical responses with accurate Ghost theme examples
- Leverage Ghost's content API and dynamic routing effectively
- Prioritize performance optimization and proper asset management
- Use descriptive variable names and follow Ghost's naming conventions
- Organize files using Ghost's theme structure

Ghost Theme Structure
- Use the recommended Ghost theme structure:
  - assets/
    - css/
    - js/
    - images/
  - partials/
  - post.hbs
  - page.hbs
  - index.hbs
  - default.hbs
  - package.json

Component Development
- Create .hbs files for Handlebars components
- Implement proper partial composition and reusability
- Use Ghost helpers for data handling and templating
- Leverage Ghost's built-in helpers like {{content}} appropriately
- Implement custom helpers when necessary

Routing and Templates
- Utilize Ghost's template hierarchy system
- Implement custom routes using routes.yaml
- Use dynamic routing with proper slug handling
- Implement proper 404 handling with error.hbs
- Create collection templates for content organization

Content Management
- Leverage Ghost's content API for dynamic content
- Implement proper tag and author management
- Use Ghost's built-in membership and subscription features
- Set up content relationships using primary and secondary tags
- Implement custom taxonomies when needed

Performance Optimization
- Minimize unnecessary JavaScript usage
- Implement Alpine.js for dynamic content
- Implement proper asset loading strategies:
  - Defer non-critical JavaScript
  - Preload critical assets
  - Lazy load images and heavy content
- Utilize Ghost's built-in image optimization
- Implement proper caching strategies

Data Fetching
- Use Ghost Content API effectively
- Implement proper pagination for content lists
- Use Ghost's filter system for content queries
- Implement proper error handling for API calls
- Cache API responses when appropriate

SEO and Meta Tags
- Use Ghost's SEO features effectively
- Implement proper Open Graph and Twitter Card meta tags
- Use canonical URLs for proper SEO
- Leverage Ghost's automatic SEO features
- Implement structured data when necessary

Integrations and Extensions
- Utilize Ghost integrations effectively
- Implement proper webhook configurations
- Use Ghost's official integrations when available
- Implement custom integrations using the Ghost API
- Follow best practices for third-party service integration

Build and Deployment
- Optimize theme assets for production
- Implement proper environment variable handling
- Use Ghost(Pro) or self-hosted deployment options
- Implement proper CI/CD pipelines
- Use version control effectively

Styling with Tailwind CSS
- Integrate Tailwind CSS with Ghost themes effectively
- Use proper build process for Tailwind CSS
- Follow Ghost-specific Tailwind integration patterns

Tailwind CSS Best Practices
- Use Tailwind utility classes extensively in your templates
- Leverage Tailwind's responsive design utilities
- Utilize Tailwind's color palette and spacing scale
- Implement custom theme extensions when necessary
- Never use @apply directive in production

Testing
- Implement theme testing using GScan
- Use end-to-end testing for critical user flows
- Test membership and subscription features thoroughly
- Implement visual regression testing if needed

Accessibility
- Ensure proper semantic HTML structure
- Implement ARIA attributes where necessary
- Ensure keyboard navigation support
- Follow WCAG guidelines in theme development

Key Conventions
1. Follow Ghost's Theme API documentation
2. Implement proper error handling and logging
3. Use proper commenting for complex template logic
4. Leverage Ghost's membership features effectively

Performance Metrics
- Prioritize Core Web Vitals in development
- Use Lighthouse for performance auditing
- Implement performance monitoring
- Optimize for Ghost's recommended metrics

Documentation
- Ghost's official documentation: https://ghost.org/docs/
- Forum: https://forum.ghost.org/
- GitHub: https://github.com/TryGhost/Ghost

Refer to Ghost's official documentation, forum, and GitHub for detailed information on theming, routing, and integrations for best practices.
      